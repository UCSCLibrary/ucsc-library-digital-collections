# Generated by curation_concerns:models:install
class FileSet < ActiveFedora::Base
  include ::Bulkrax::Metadata
  # TODO: remove/repurpose after ScoobySnacks is removed
  property :primaryFilename, predicate: ::RDF::Vocab::EBUCore.filename do |index|
    index.as :stored_sortable
  end

  include ::Hyrax::FileSetBehavior
  include Hyrax::FileSetBehavior
  include SamveraHls::FileSetBehavior

  Hydra::Derivatives.output_file_service = ::PersistDerivatives

  self.indexer = ::FileSetIndexer

  def self.audio_mime_types
    SamveraHls::FileSetBehavior.audio_mime_types
  end

  def create_derivatives(filename)
    # create hls derivatives instead of normal ones 
    # for audio or video
    return if create_hls_derivatives(filename)
    
    if self.image?
      Rails.logger.debug "event: coming #{self.mime_type}"
      Hydra::Derivatives::ImageDerivatives.create(filename, outputs: image_outputs) if self.mime_type == 'image/png'
      Hydra::Derivatives::Jpeg2kImageDerivatives.create(filename, outputs: jpeg2k_image_outputs) if self.mime_type == 'image/tiff'
      image_server_cache_derivatives if ["production","staging","sandbox"].include?(Rails.env.to_s)
    else
      # This is the behavior I am overwriting
      # (this method was previously delegated to
      # file_set_derivatives_service)
      file_set_derivatives_service.create_derivatives(filename)
    end
  end
  
  def derivative_path_factory
    ::DerivativePath
  end

  def image_outputs
    [{ label: :thumbnail, 
       format: 'jpg', 
       size: '200x150>', 
       url: derivative_url('thumbnail') }]
  end
  
  def jpeg2k_image_outputs
    [{recipe: :default,
      output_path: derivative_path_factory.derivative_path_for_reference(self,"j2c"),
      url: derivative_url('j2c')}]
  end

  def image_server_derivative_sizes
    
    hh = height.first.to_i
    ww = width.first.to_i
    square_region = (hh > ww) ? "0,#{(hh-ww)/2},#{ww},#{ww}" : "#{(ww-hh)/2},0,#{hh},#{hh}"
    ['90,',
     '!200,150',
     '250,',
     '!300,300',
     '800,',
     ApplicationController.helpers.square_thumbnail_region(self,150)]
  end

  def image_server_cache_derivatives
    image_server_derivative_sizes.each do |size|
      url = UcscThumbnailHelper.iiif_thumbnail_url(self,size)
      uri = URI.parse(url)
      http = Net::HTTP.new(uri.host,uri.port)
      http.use_ssl = true
      http.verify_mode = OpenSSL::SSL::VERIFY_NONE
      http.get(uri.request_uri)
    end
  end
  
#  delegate :derivative_url, to: :file_set_derivatives_service
  
  def derivative_url(destination_name = nil)
    if destination_name.nil?
      @deriv_url ||= derivative_dir.gsub(Hyrax.config.derivatives_path,"")
      return @deriv_url
    end
    if image_derivative_names.include? destination_name
      path = derivative_path_factory.derivative_path_for_reference(self,destination_name)
      URI("file://#{path}").to_s
    else
      file_set_derivatives_service.derivative_url(destination_name)
    end
  end

    def cleanup_derivatives
      derivative_path_factory.derivatives_for_reference(self).each do |path|
        FileUtils.rm_f(path)
      end
    end

  private

  def image_derivative_names
    ['small','medium','large','square','fullsize']
  end

end
